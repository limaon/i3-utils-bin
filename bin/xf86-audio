#!/bin/sh -eu

################################################################################
#
# VARIABLES
#
################################################################################

ACTION=
INTERVAL="3"
NOTIFICATION_TIMEOUT=1000
DEVICE=""
MIXER="Master"
COMMAND=

################################################################################
#
# FUNCTIONS
#
################################################################################

print_usage_head() {
    printf "Usage: %s [OPTIONS] -c COMMAND\n" "${0}"
    printf "       %s -a\n" "${0}"
    printf "       %s -h\n" "${0}"
}

print_usage() {
    print_usage_head

    printf "\nThis script is a wrapper for pamixer that will change the volume\n"
    printf "and send those changes to a notification daemon.\n\n"

    printf "COMMAND:\n"
    printf "  -c up           Increase volume.\n"
    printf "  -c down         Decrease volume.\n"
    printf "  -c mute         Mute volume.\n"
    printf "  -c toggle       Toggle mute/unmute.\n\n"

    printf "OPTIONS:\n"
    printf "   -i <interval>  Change the interval for volume up/down.\n"
    printf "                  The default is 3 (percent).\n\n"

    printf "   -D <device>    Specify a device, such as 'pulse'.\n"
    printf "                  If omitted using 'default'.\n\n"

    printf "   -M <mixer>     If omitted using 'Master'.\n"
    printf "                  Use -a to show all mixers.\n\n"

    printf "HELP:\n"
    printf "   -a             Show all mixers.\n"
    printf "   -h             Show help.\n"
}

get_all_mixers() {
    pamixer --list-sinks | awk '{print $1}'
}

check_sink_existence() {
    local sink="$1"
    if ! pamixer --list-sinks | grep -q "^$sink "; then
        printf "Error: The sink '%s' doesn't exist.\n" "$sink"
        exit 1
    fi
}

################################################################################
#
# COMMAND LINE ARGUMENTS
#
################################################################################

############################################################
# Parse arguments
############################################################
while [ "${#}" -gt 0 ]; do
    case "${1}" in
        -c)
            shift
            if [ "${1}" != "up" ] && [ "${1}" != "down" ] && [ "${1}" != "mute" ] && [ "${1}" != "toggle" ]; then
                printf "Error, -c must either be 'up', 'down', 'mute' or 'toggle'.\n"
                print_usage_head
                exit 1
            fi
            ACTION="${1}"
            ;;
        -i)
            shift
            if ! printf "%d" "${1}" >/dev/null 2>&1; then
                printf "Error, the value for -i must be an integer.\n"
                print_usage_head
                exit 1
            fi
            INTERVAL="${1}"
            ;;
        -D)
            shift
            DEVICE="${1}"
            ;;
        -M)
            shift
            MIXER="${1}"
            ;;
        -a)
            get_all_mixers
            exit
            ;;
        -h)
            print_usage
            exit
            ;;
        *)
            printf "Unknown argument: %s\n" "${1}"
            print_usage_head
            exit 1
            ;;
    esac
    shift
done

############################################################
# Check required arguments
############################################################
if [ "${ACTION}" = "" ]; then
    printf "Error, -c is mandatory.\n"
    print_usage_head
    exit 1
fi

if [ "${DEVICE}" != "" ]; then
    check_sink_existence "$DEVICE"
fi

################################################################################
#
# MAIN ENTRYPOINT
#
################################################################################

############################################################
# Build command
############################################################

# Use specific device?
if [ "${DEVICE}" != "" ]; then
    DEVICE="--sink ${DEVICE}"
fi

# Build command
if [ "${ACTION}" = "up" ]; then
    COMMAND="pamixer ${DEVICE} --increase ${INTERVAL}"
elif [ "${ACTION}" = "down" ]; then
    COMMAND="pamixer ${DEVICE} --decrease ${INTERVAL}"
elif [ "${ACTION}" = "mute" ]; then
    COMMAND="pamixer ${DEVICE} --toggle-mute"
else
    COMMAND="pamixer ${DEVICE} --toggle-mute"
fi

############################################################
# Run command
############################################################

OUTPUT="$(eval "${COMMAND}")"

############################################################
# Parse output
############################################################

PERCENT="$(pamixer ${DEVICE} --get-volume)"
MUTED=0
if pamixer ${DEVICE} --get-mute | grep -q "true"; then
    MUTED=1
fi

# Get notification icon/text
if [ "${MUTED}" = "1" ]; then
    ICON_STRING="volume-level-muted"
    TEXT_STRING="Volume: MUTED"
    PERCENT=0
else
    ICON_STRING="audio-volume-high"  # Use papirus theme for muted icon
    TEXT_STRING="Volume: ${PERCENT}%"
fi

############################################################
# Send notification
############################################################
if [ "${ACTION}" = "up" ] || [ "${ACTION}" = "down" ]; then
    notify-send "${TEXT_STRING}" -i ${ICON_STRING} -t ${NOTIFICATION_TIMEOUT} -u low -h int:value:${PERCENT} -h string:synchronous:volume
fi

############################################################
# Mode "mute" and "toggle"
############################################################
if [ "${ACTION}" = "mute" ] || [ "${ACTION}" = "toggle" ]; then
    notify-send "${TEXT_STRING}" -i ${ICON_STRING} -t ${NOTIFICATION_TIMEOUT} -u low -h int:value:${PERCENT} -h string:synchronous:volume
fi

